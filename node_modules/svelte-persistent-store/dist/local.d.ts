export declare const readable: <T>(key: string, value: T, start: (set: (value: T) => void) => void | (() => void)) => import("svelte/store").Readable<T>, writable: <T>(key: string, value: T, start?: (set: (value: T) => void) => void | (() => void)) => import("svelte/store").Writable<T>, derived: <S extends import("svelte/store").Readable<any> | [import("svelte/store").Readable<any>, ...import("svelte/store").Readable<any>[]], U>(key: string, stores: S, fn: ((values: S extends import("svelte/store").Readable<infer U_1> ? U_1 : { [K in keyof S]: S[K] extends import("svelte/store").Readable<infer U_2> ? U_2 : never; }) => U) | ((values: S extends import("svelte/store").Readable<infer U_1> ? U_1 : { [K in keyof S]: S[K] extends import("svelte/store").Readable<infer U_2> ? U_2 : never; }, set: (value: U) => void) => void | (() => void)), initial_value?: U) => import("svelte/store").Readable<U>, get: typeof import("svelte/internal").get_store_value;
