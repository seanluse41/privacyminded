import { get as ogGet, Readable, Writable } from 'svelte/store';
/** Callback to inform of a value updates. */
declare type Subscriber<T> = (value: T) => void;
/** Unsubscribes from value updates. */
declare type Unsubscriber = () => void;
/** Start and stop notification callbacks. */
declare type StartStopNotifier<T> = (set: Subscriber<T>) => Unsubscriber | void;
/** One or more `Readable`s. */
declare type Stores = Readable<any> | [Readable<any>, ...Array<Readable<any>>];
/** One or more values from `Readable` stores. */
declare type StoresValues<T> = T extends Readable<infer U> ? U : {
    [K in keyof T]: T[K] extends Readable<infer U> ? U : never;
};
declare type SimpleDeriver<T, U> = (values: StoresValues<T>) => U;
declare type AdvancedDeriver<T, U> = (values: StoresValues<T>, set: Subscriber<U>) => Unsubscriber | void;
declare type Deriver<T, U> = SimpleDeriver<T, U> | AdvancedDeriver<T, U>;
export declare type StoreModule = {
    readable: <T>(key: string, value: T, start: StartStopNotifier<T>) => Readable<T>;
    writable: <T>(key: string, value: T, start?: StartStopNotifier<T>) => Writable<T>;
    derived: <S extends Stores, U>(key: string, stores: S, fn: Deriver<S, U>, initial_value?: U) => Readable<U>;
    get: typeof ogGet;
};
export declare function generator(storage: Storage): StoreModule;
export {};
